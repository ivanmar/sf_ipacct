<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('AccUsagedefinition', 'doctrine');

/**
 * BaseAccUsagedefinition
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $id_isporg
 * @property string $definitionname
 * @property string $acctype
 * @property string $measureunit
 * @property decimal $billingunit
 * @property decimal $pricebillingunit
 * @property decimal $priceonstart
 * @property AccIsporg $AccIsporg
 * @property Doctrine_Collection $AccAccseries
 * @property Doctrine_Collection $AccPostpaccountlog
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method integer             getIdIsporg()           Returns the current record's "id_isporg" value
 * @method string              getDefinitionname()     Returns the current record's "definitionname" value
 * @method string              getAcctype()            Returns the current record's "acctype" value
 * @method string              getMeasureunit()        Returns the current record's "measureunit" value
 * @method decimal             getBillingunit()        Returns the current record's "billingunit" value
 * @method decimal             getPricebillingunit()   Returns the current record's "pricebillingunit" value
 * @method decimal             getPriceonstart()       Returns the current record's "priceonstart" value
 * @method AccIsporg           getAccIsporg()          Returns the current record's "AccIsporg" value
 * @method Doctrine_Collection getAccAccseries()       Returns the current record's "AccAccseries" collection
 * @method Doctrine_Collection getAccPostpaccountlog() Returns the current record's "AccPostpaccountlog" collection
 * @method AccUsagedefinition  setId()                 Sets the current record's "id" value
 * @method AccUsagedefinition  setIdIsporg()           Sets the current record's "id_isporg" value
 * @method AccUsagedefinition  setDefinitionname()     Sets the current record's "definitionname" value
 * @method AccUsagedefinition  setAcctype()            Sets the current record's "acctype" value
 * @method AccUsagedefinition  setMeasureunit()        Sets the current record's "measureunit" value
 * @method AccUsagedefinition  setBillingunit()        Sets the current record's "billingunit" value
 * @method AccUsagedefinition  setPricebillingunit()   Sets the current record's "pricebillingunit" value
 * @method AccUsagedefinition  setPriceonstart()       Sets the current record's "priceonstart" value
 * @method AccUsagedefinition  setAccIsporg()          Sets the current record's "AccIsporg" value
 * @method AccUsagedefinition  setAccAccseries()       Sets the current record's "AccAccseries" collection
 * @method AccUsagedefinition  setAccPostpaccountlog() Sets the current record's "AccPostpaccountlog" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAccUsagedefinition extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('acc_usagedefinition');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'acc_usagedefinition_id',
             'length' => 4,
             ));
        $this->hasColumn('id_isporg', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '0',
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('definitionname', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('acctype', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('measureunit', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('billingunit', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 18,
             ));
        $this->hasColumn('pricebillingunit', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'default' => '0',
             'primary' => false,
             'length' => 18,
             ));
        $this->hasColumn('priceonstart', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'default' => '0',
             'primary' => false,
             'length' => 18,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('AccIsporg', array(
             'local' => 'id_isporg',
             'foreign' => 'id'));

        $this->hasMany('AccAccseries', array(
             'local' => 'id',
             'foreign' => 'id_usagedefinition'));

        $this->hasMany('AccPostpaccountlog', array(
             'local' => 'id',
             'foreign' => 'id_usagedefinition'));
    }
}