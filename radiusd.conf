prefix = /usr
exec_prefix = /usr
sysconfdir = /etc
localstatedir = /var
sbindir = /usr/sbin
logdir = ${localstatedir}/log/radius
raddbdir = ${sysconfdir}/raddb
radacctdir = ${logdir}/radacct
name = radiusd
confdir = ${raddbdir}
run_dir = ${localstatedir}/run/radiusd
db_dir = ${raddbdir}
libdir = ${exec_prefix}/lib/freeradius
pidfile = ${run_dir}/radiusd.pid

user = radiusd
group = radiusd

max_request_time = 30
delete_blocked_requests = yes
cleanup_delay = 5
max_requests = 2048

listen {
	ipaddr = *
	port = 0
	type = auth
}
listen {
	ipaddr = *
	port = 0
	type = acct
}


hostname_lookups = no
allow_core_dumps = no
regular_expressions	= yes
extended_expressions	= yes

log {
        destination = files
        file = ${logdir}/radius.log
        syslog_facility = daemon
        stripped_names = no
        auth = yes
        auth_badpass = yes
        auth_goodpass = yes
}
							
usercollide = no

lower_user = no
lower_pass = no

nospace_user = no
nospace_pass = no

#  The program to execute to do concurrency checks.
checkrad = ${sbindir}/checkrad

security {
	max_attributes = 150
	reject_delay = 2
	status_server = yes
}

proxy_requests  = no

thread pool {
	start_servers = 5
	max_servers = 32
	min_spare_servers = 3
	max_spare_servers = 10
	max_requests_per_server = 0
}

modules {

	$INCLUDE  ${confdir}/sql.conf

	pap {
		auto_header = yes
	}

	preprocess {
		huntgroups = ${confdir}/huntgroups
		hints = ${confdir}/hints
		with_ascend_hack = no
		ascend_channels_per_line = 23
		with_ntdomain_hack = no
		with_specialix_jetstream_hack = no
		with_cisco_vsa_hack = no
	}

	always fail {
		rcode = fail
	}
	always reject {
		rcode = reject
	}
	always ok {
		rcode = ok
		simulcount = 0
		mpp = no
	}

	expr {
	}
	exec {
		wait = no
		input_pairs = request
		shell_escape = yes
		output = none
	}
	exec echo {
		wait = yes
		program = "/bin/echo %{User-Name}"
		input_pairs = request
		output_pairs = reply
		shell_escape = yes

	}
	checkval {
		item-name = Calling-Station-Id
		check-name = Calling-Station-Id
		data-type = string
		notfound-reject = no
	}
	detail {
		detailfile = ${radacctdir}/%{Client-IP-Address}/detail-%Y%m%d
		detailperm = 0600
	}
	detail auth_log {		# authorize section
		detailfile = ${radacctdir}/%{Client-IP-Address}/auth-detail-%Y%m%d
		detailperm = 0600
	}
	detail reply_log {		# post-auth section
		detailfile = ${radacctdir}/%{Client-IP-Address}/reply-detail-%Y%m%d
		detailperm = 0600
	}
	acct_unique {
		key = "User-Name, Acct-Session-Id, NAS-IP-Address, Client-IP-Address, NAS-Port"
	}
	radutmp {
		filename = ${logdir}/radutmp
		username = %{User-Name}
		case_sensitive = yes
		check_with_nas = yes		
		perm = 0600
		callerid = "yes"
	}
	attr_filter {
		attrsfile = ${confdir}/attrs
	}
	expiration {
		reply-message = "Password Has Expired\r\n" 
	}

	############### COUNTER ##################

	sqlcounter dailycounter {
		counter-name = Daily-Session-Time
		check-name = Max-Daily-Session
		reply-name = Session-Timeout
		sqlmod-inst = sql
		key = User-Name
		reset = daily
		query = "SELECT SUM(AcctSessionTime - \
		        GREATER((%b - AcctStartTime::ABSTIME::INT4), 0)) \
		        FROM radacct WHERE UserName='%{%k}' AND \
		        AcctStartTime::ABSTIME::INT4 + AcctSessionTime > '%b'"

	}
	sqlcounter monthlycounter {
		counter-name = Monthly-Session-Time
		check-name = Max-Monthly-Session
		reply-name = Session-Timeout
		sqlmod-inst = sql
		key = User-Name
		reset = monthly
		query = "SELECT SUM(AcctSessionTime - \
		        GREATER((%b - AcctStartTime::ABSTIME::INT4), 0)) \
		        FROM radacct WHERE UserName='%{%k}' AND \
		        AcctStartTime::ABSTIME::INT4 + AcctSessionTime > '%b'"
	}
	sqlcounter noresetcounter {
		counter-name = Max-All-Session-Time
		check-name = Max-All-Session
		sqlmod-inst = sql
		key = User-Name
		reset = never
		query = "SELECT SUM(AcctSessionTime) FROM radacct WHERE UserName='%{%k}'"
	}
       sqlcounter accessperiod {
               counter-name = Max-Access-Period-Time
               check-name = Access-Period
               sqlmod-inst = sql
               key = User-Name
               reset = never
	       query = "SELECT now() - AcctStartTime FROM radacct WHERE UserName = '%{%k}' ORDER BY AcctStartTime LIMIT 1"
	}
	#########################################

}


instantiate {
	exec
	expr
	noresetcounter
#	expiration
}

authorize {
	preprocess
	sql
	noresetcounter
#	expiration
	accessperiod
}

authenticate {
	Auth-Type PAP {
		pap
	}
}

preacct {
	preprocess
	acct_unique
}

accounting {
	sql
	detail
}

session {
	sql
}

post-auth {
	sql
}

